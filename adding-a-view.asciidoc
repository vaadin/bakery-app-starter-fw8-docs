---
title: Adding a view
order: 3
layout: page
---

== Adding a view

We're going to create a new view and add it to the navigation, step-by-step. The view we are creating here is an "About" view.

=== Creating a design

The views of bakery are built with Designer. We start off by creating a new design file. Bakery uses a convention that each main view has it's own package. We create a new package `com.vaadin.starter.bakery.ui.view.about` and within it a new design called AboutViewDesign.

image::img/new-design.png[Adding a new design file]

=== Extending Design to concrete View

Creating a design will create a HTML design file in the resource package as well as generated Java class in the java package. Create a Class called `AboutView` in the same package which extends the generated design package. We extend the generated class because the generated class is regenerated when the design is edited and it would remove our changes. The extending `AboutView` is the class that will be initialized when the user wants to enter the view.

```java
package com.vaadin.starter.bakery.ui.view.about;

public class AboutView extends AboutViewDesign {
}
```

Any logic or configuration that you want to add into the view goes here.

=== Defining it as a view of the application

We have to tell Spring that `AboutView` is a valid view to be shown in the application. The is done by annotating the class with `@SpringView` and implementing NavigableView.

```java
package com.vaadin.starter.bakery.ui.view.about;

import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.spring.annotation.SpringView;
import com.vaadin.starter.bakery.ui.view.NavigableView;

@SpringView(name = "about")
public class AboutView extends AboutViewDesign implements NavigableView {

    @Override
    public void enter(ViewChangeEvent viewChangeEvent) {
    }
}
```

`@SpringView` tells Spring that this is a valid view to initialize as a view. The name parameter is what is used in the url for the view, for example www.myapplication.com/about. `NavigableView` requires you to implement the `enter(ViewChangeEvent)`. This method is called whenever the user is navigates to the view and is an easy place to for example update data. If you don't want to do anything when the user enters the view, then you can leave the implementation empty.

The view is now accessible by going to the url http://localhost:8080/#!about. It is however not in the menu yet.

image::img/about-view-not-in-menu.png[About view available, but not in menu.]

=== Adding the view to the menu

To modify the menu, we want to first open the main layout design, `MainViewDesign` in the view package. We want to add a new Button into the 'menu' layout. The easiest way to do this is select the last view and pressing copy paste on it (ctrl+c -> ctrl+v). This will add a copy of the menu button with same icon and caption. Let's change those. In the properties panel, you want to change Name, Icon, Caption and DomId to match your new view. Next to icon is a handy button where you see the icons and select a new one visually.

image::img/about-to-menu-designer.png[About added to the menu.]

The button is now in the menu but it still doesn't do anything. Let's go to the concrete implementation of the view to change that, `ui.view.MainView` in the java package. In the `populateMenu()` let's configure clicks to the "About the app"-button to navigate to the AboutView.

```java
public void populateMenu() {
	attachNavigation(storefront, StorefrontView.class);
	attachNavigation(dashboard, DashboardView.class);
	attachNavigation(users, UserAdminView.class);
	attachNavigation(products, ProductAdminView.class);
	attachNavigation(about, AboutView.class);
	logout.addClickListener(e -> presenter.logout());
}
```

Now we have the view in the menu as well and the user can navigate to it. That's it!

image::img/about-in-menu.png[About view ready.]

=== Restricting access to the view.

If you want to secure the app to some views, you can require the user to have certain roles by adding an annotation.

```java
@SpringView(name = "about")
@Secured(Role.ADMIN)
public class AboutView extends AboutViewDesign implements NavigableView {
  ...
```

`@Secured(Role.ADMIN)` will require that the user that is logged in has the ADMIN role to be able to access the view. If the user does not have the role, then the view will not be in the menu and the user will get a "Access denied" if she tries to access it with a direct URL or otherwise.
