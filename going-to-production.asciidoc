---
title: Going to production
order: 7
layout: page
---

== Going to Production
There are many options when looking to deploy your application for production, ranging from in-house to cloud-based solutions.

In the following we'll take a look at how to deploy the Spring version to AWS Elastic Beanstalk (EB) and how to deploy the JavaEE version to IBM Bluemix.

Beanstalk is part of Amazon Web Services (AWS) and hides a lot of the complexity with provisioning, load balancing, scaling etc, since you do not have to deal with each of these individually. However, since it's part of AWS, you can still take full control of the individual services, if you have specific needs, or as your application grows.

Bluemix is a cloud platform as a service based on Cloud Foundry technology. It hides a lot of the complexity with provisioning, load balancing, scaling etc, since you do not have to deal with each of these individually. You can still take full control of the individual services, if you have specific needs, or as your application grows.

=== Deploying the Spring Version to Amazon Elastic Beanstalk

In order to use Amazon Elastic Beanstalk, you need to have a AWS account. Head over to https://aws.amazon.com/elasticbeanstalk to read more about he service, and create an account.

TIP: You will be asked to provide credit-card details before making use of AWS services, but there is a link:https://aws.amazon.com/free[free tier] that allows you to try the service for free. You can also set up a link:http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/free-tier-alarms.html[billing alarm] to ensure you don't accidentally exceed the free tier limits (or any other spending budget you might have.)

We'll do the following steps

  1. Configure the application for production
  2. Build a production WAR
  3. Create an EB application, upload the WAR
  4. Create a stand-alone production database in EB
  5. Configure the application to use the production database

==== Configuring Vaadin for Production
When going to production, you want to make sure your Vaadin application is in production mode by setting the following parameter in `application.properties`:

`vaadin.servlet.productionMode=true`

==== Configuring a Production Database

To be able to use another database, you first need to add the appropriate JDBC diver as a dependency in `pom.xml`, e.g for MySQL:
```
<dependency>
  <groupId>mysql</groupId>
  <artifactId>mysql-connector-java</artifactId>
</dependency>
```
Changing the database is covered in more detail in <<changing-database,Changing database>>

When running in EB, the environment provides some variables we can use to configure our database connection in `application.properties`:
```
spring.jpa.hibernate.ddl-auto=create
spring.datasource.url=jdbc:mysql://${RDS_HOSTNAME}:${RDS_PORT}/${RDS_DB_NAME}
spring.datasource.username=${RDS_USERNAME}
spring.datasource.password=${RDS_PASSWORD}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
```

NOTE: There is a separate `application.production.properties` with these properties pre-configured. We'll configure EB to use that instead of the regular `application.properties` - that way we can have separate production and development properties, and use the embedded database when developing.

==== Preparing a Production WAR
Run `mvn install` to build and package your application into a `.war` -file (it will be placed in the `target` folder).

==== Creating an EB Web Application
To create a new Elastic Beanstalk application, either click "Build a web app" in the AWS main page, know as the "console".
(You can also find Elastic Beanstalk in the menu and "Create New Application" - the steps will be similar, but not identical.)

image::img/aws-eb-create.png[Creating a EB web application]

Next choose a name for your application, select "tomcat", and "upload your code".

At this point, we can click "Create application", and wait for the environment to start (it can take a while).

Once started, we can go to the URL (available in at the top of the page) and verify our application is working.

image::img/aws-eb-running.png[Application running]

However, at this point the application is still using the internal database.

==== Creating a Database for Production
From the "Configuration" screen we can configure a database in the "Data Tier" -section. We'll "create a new RDS database", choose MySQL, set a master username and password, and go ahead an create the database. This operation can take a while to complete.

image::img/aws-eb-mysql.png[Creating a database]

==== Enabling Production Mode
Once the database is up-and-running, we'll configure our application to use `application.production.properties`, which will enable productionMode and take the production database into use. Go to "Software Configuration" on the "Configuration" screen. You want to set the following in "Environment Properties":

`spring.config.name=application.production`

image::img/aws-eb-props.png[Use production mode properties]

NOTE: The `spring.config.name` -property should not have the `.properties` extension.

When you apply the change, your environment will be restarted with the new configuration.

==== Post Production
Once you have your application up-and-running with a production database, you might wonder how you can see the contents of your database. You can do this with the regular tools you use to connect to MySQL, but by default access is restricted; you need to modify your security realm. AWS provides a handy "My IP" shorthand; after applying, you should be able to connect to the database (note: Elastic Beanstalk uses the database name "ebdb" by default.)

image::img/aws-eb-mysql2.png[Accessing the database remotely]

You may also want to review server logs, especially if you run into problems. You can request and download (view) logs easily from the console:

image::img/aws-eb-logs.png[Accessing the database remotely]

There is a lot more you can do with AWS Elastic Beanstalk and Amazon Web Services in general, and fortunately the link:http://aws.amazon.com/documentation/elasticbeanstalk[official documentation] is very good.

Here are some further topics you might want to review:

* link:https://aws.amazon.com/answers/web-applications/aws-web-app-deployment-java/[Deploying Java web applications on AWS (starting point)]
* link:https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html[Working with Java (starting point)]
* link:https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customdomains.html[Your domain name]
* link:https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https.html[Configuring HTTPS]
* link:https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.db.html[Configuring databases]
* link:https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3.html[EB CLI]


=== Deploying the JavaEE Version to Bluemix

In order to use Bluemix, you need to have a Bluemix account. Head over to https://console.bluemix.net/ to read more about he service, and create an account.

TIP: These deployment instructions are based on a free 30-day account for Bluemix, meant to test it out. For a real deployment, you should get a real account.

==== Configuring Vaadin for Production
The provided `manifest.yml` file will automatically set your Vaadin application to run in production mode by specifying `-Dvaadin.productionMode=true` for the server.

==== Configuring a Production Database
The database configuration is defined in `src/main/resources/META-INF/persistence.xml`. By default, the application uses a JTA data source named `BakeryDS`and looks it up through standard JNDI. There is no need to change this as long as you create a database using the same identifier in Bluemix (see below).

What you need to change to avoid dropping and re-creating your production database on each redeploy, is to remove
```
<property name="javax.persistence.schema-generation.database.action" value="drop-and-create" />
```
from `persistence.xml`.

TIP: If you are just testing deployment to Bluemix, leave the `schema-generation.database.action` there for the first deploy to get initial data into the database. Remember to remove it afterwards.

==== Preparing a production WAR
Bluemix does not provide an SLF4J implementation. Uncomment the dependency to `slf4j-simple` in `pom.xml` to make sure you see all the log messages.

Run
```
mvn install
```
to build and package the application into a `.war` -file (it will be placed in the `target` folder).

==== Preparing your Bluemix Account
When you log in to https://console.bluemix.net for the first time, you will be asked to create an organization for your account.

To be able to use the instructions in this document, create an organization in the "US South" region. The name of the organization can be anything. Once you created an organization, create a "space" inside the organization and name it "dev".

Once the organization and space is created, we can use the command line tools to setup and deploy the application.

First, download the Cloud Foundry command line tools based on the instructions in https://github.com/cloudfoundry/cli#downloads.

Once the command line tools are installed, define the Bluemix API endpoint to use for deployment:
```
cf api https://api.ng.bluemix.net
```

NOTE: If you chose another region than "US South", you need to use the corresponding API endpoint.

We then need to authenticate to Bluemix using our credentials:
```
cf login
```

TIP: If you get a message about "No org or space targeted, use 'cf target -o ORG -s SPACE'" it might be that you have created the space in another region and did not change the API endpoint. Fix that before continuing.

==== Creating a database for production
Once the organization and space has been found, we can create a database to use:
```
cf create-service elephantsql turtle BakeryDS
```

This will create a free (slow) PostgreSQL server to store the data. The application is already configured to use a data source named "BakeryDS", so the newly created database will automatically be used as long as you do not change the identifier.

TIP: The `turtle` plan of ElephantSQL is run on a shared server and the size of the database is quite limited. For a real production deployment, you should consider a better plan (or another database).

=== Deploying the Application

With everything set up, we can deploy the application using:
```
cf push
```

TIP: If you get a message about "Server error, status code: 400, error code: 210003, message: The host is taken" you need to change the `name:` attribute in `manifest.yml`. The `name` attribute is used to determine the hostname of the application, e.g. `name.mybluemix.net`

If all goes well, you should see something like
```
0 of 1 instances running, 1 starting
1 of 1 instances running

App started

OK

App mybakery was started using this command `.liberty/initial_startup.rb`
...
urls: app.mybluemix.net
```
once the application has been deployed.

Open the url in your browser to access the application (http://app.mybluemix.net, change `app` in the URL to whatever your application name is in the manifest).

TIP: If all does not go well, run `cf logs mybakery` to see the deployment logs for the application. It might just be something which is slower than usual. Try waiting for a while longer or re-reun the `cf push` command.

NOTE: When running in production mode, the application will by default create the database and add only an `admin@vaadin.com` user and nothing else.

==== Post Production
Once you have your application up-and-running with a production database, you might wonder how you can see the contents of your database. You can do this through the Bluemix console at https://console.bluemix.net/. Click on the `BakeryDS` service and then open the `ElephantSQL` dashboard. This will show you the URL to the database together with username and password. It will also allow you to browser the DB using the `BROWSER` tab.

image::img/bluemix-query-users.png[Querying the database]

If you want to review logs in the browser, they are also available through https://console.bluemix.net/ -> select your Cloud Foundry app -> select `Logs`

There is a lot more you can do with Bluemix, and fortunately the link:https://console.bluemix.net/docs/[official documentation] is quite comprehensive.
