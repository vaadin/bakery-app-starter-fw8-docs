---
title: Changing database
order: 6
layout: page
---

[[changing-database]]
== Changing Database

The app starter comes bundled with an in-memory H2 database. You can change which database is in use by adding the correct dependencies for the your database and modifying the properties file.

== Adding database dependency into pom.xml

The corresponding connector for you database needs to be available to be able to use your database of choice. For example if you use MySQL, you can add the approriate dependency to your pom.xml

```
<dependency>
  <groupId>mysql</groupId>
  <artifactId>mysql-connector-java</artifactId>
   <!-- The version element is only needed for the JavaEE version -->
   <version>6.0.4</version>
</dependency>
```

== Configuring the Spring Application to use your Database

The database is configured in `src/main/resources/application.properties`. You can configure the database with the following properties.

```
spring.jpa.hibernate.ddl-auto=create
spring.datasource.url=jdbc:mysql://localhost/dbtest
spring.datasource.username=someuser
spring.datasource.password=somepassword
```

Here the URL to the database is given using `spring.datasource.url`. Spring Boot can most often deduce which database you have in use from the url and you don't have to explicitely specify it. If for some reason you need to have control of them, you can also add `spring.datasource.driver-class-name=com.mysql.jdbc.Driver` and `spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect`.

== Configuring the JavaEE Application to use your Database

The database is configured in `src/main/resources/META-INF/persistence.xml`. You can configure the database with the following properties.

```
<property name="javax.persistence.schema-generation.database.action" value="drop-and-create" />
<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost/dbtest" />
<property name="javax.persistence.jdbc.user" value="someuser" />
<property name="javax.persistence.jdbc.password" value="somepassword" />
```

Here the URL to the database is given using `javax.persistence.jdbc.url` and the database driver (`com.mysql.jdbc.Driver` for MySQL) using `javax.persistence.jdbc.driver`. To control the Hibernate dialect (provided you use Hibernate), you can use `hibernate.dialect`, e.g. `<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" />`.

== Automatically Updating the Database Schema

The property `spring.jpa.hibernate.ddl-auto` in `application.properties` (Spring) or `<property name="javax.persistence.schema-generation.database.action" value="drop-and-create" />` in `persistence.xml` (JavaEE) defines what should be done to the database when the application starts. The valid options are none, update, create and create-drop.

* `none` does not modify the database in any way on application start-up.
* `update` tries to modify an existing schema to match the one defined by the application without deleting old data.
* `create` creates the database if one doesn't exist from before, but doesn't modify an existing database in any way.
* `create-drop` always deletes any existing database and creates it again from scratch.

In Spring, the default option depends on the choice of database. In-memory databases by default do `create-drop` while other databases use `none`.

You can read more on how to configure the database in Spring's documentation https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html[Working with SQL databases]
